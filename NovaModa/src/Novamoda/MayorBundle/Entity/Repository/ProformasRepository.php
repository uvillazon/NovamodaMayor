<?php
/**
 * Created by PhpStorm.
 * User: uvillazon
 * Date: 07/10/2015
 * Time: 09:01
 */
namespace Novamoda\MayorBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Novamoda\MayorBundle\Entity\DetallesProforma;
use Novamoda\MayorBundle\Entity\Proformas;
use Novamoda\MayorBundle\Entity\Repository\BaseRepository;

/**
 * ProformasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProformasRepository extends BaseRepository
{

    /**
     * @param $data
     * @return int|string
     */
    public function guardarProforma($data, $archivo)
    {
        $result = "0";
        try {
//            var_dump($data);
            $date = date_create_from_format('d/m/Y', $data["fecha"]);
//            var_dump($date);
            $proforma = new Proformas();
            $proforma->setAlmacen($data["almacen"]);
            $proforma->setIdAlmacen($data["idalmacen"]);
            $proforma->setIdMarca($data["idmarca"]);
            $proforma->setNombreArchivo($archivo["nombre_archivo"]);
            $proforma->setTipoArchivo($archivo["tipo_archivo"]);
            $proforma->setUrlArchivo($archivo["url_archivo"]);
            $proforma->setMarca($data["marca"]);
            $proforma->setEstado("NUEVO");
            $proforma->setNombre($data["nombre"]);
            $proforma->setNroFactura($data["nro_factura"]);
            $proforma->setFecha($date);
//        $proforma->set
            $this->_em->persist($proforma);
            $this->_em->flush();
            $result = $proforma->getIdProforma();
        } catch (\Exception $e) {

//            var_dump($e);
            $result = $e->getMessage();
        }
        return $result;
    }

    public function editarProforma($data){
        $proforma = $this->findOneBy(array("idProforma" => $data["id_proforma"]));
        /**
         * @var Proformas $proforma
         */
        if (!is_null($proforma)) {
            $proforma->setEstado("EN PROCESO");
            $this->_em->persist($proforma);
            $this->_em->flush();
            return $proforma->getIdProforma();
        } else {
            return "No Existe la Proforma";
        }
    }

    public function cambiarEstado($data)
    {
        $proforma = $this->findOneBy(array("idProforma" => $data["id_proforma"]));
        /**
         * @var Proformas $proforma
         */
        if (!is_null($proforma)) {
            $proforma->setEstado("EN PROCESO");
            $this->_em->persist($proforma);
            $this->_em->flush();
            return $proforma->getIdProforma();
        } else {
            return "Ocurrio algun Problema";
        }
//        return $result;
    }

    public function eliminarProforma($id)
    {
        $result = "";
        try {
            $proforma = $this->findOneBy(array("idProforma" => $id));
            /**
             * @var Proformas $proforma
             */
            if($proforma->getEstado()== "NUEVO"){

                $repoDeta = $this->_em->getRepository('NovamodaMayorBundle:DetallesProforma');
                $detalles = $repoDeta->findBy(array("idProforma"=>$id));
                foreach ( $detalles as $detalle ) {
                    /**
                     * @var DetallesProforma $detalle
                     */
                    $this->_em->remove($detalle);
                }

                $this->_em->remove($proforma);
                $this->_em->flush();
                $result = $id;
            }
            else{
                $result = "La proforma esta en estado inadecuado para que pueda ser Eliminado";
            }
        } catch (\Exception $e) {
            $result = $e->getMessage();
        }

        return $result;
    }
}
