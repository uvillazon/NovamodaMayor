<?php
/**
 * Created by PhpStorm.
 * User: uvillazon
 * Date: 07/10/2015
 * Time: 09:01
 */
namespace Novamoda\MayorBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Novamoda\MayorBundle\Entity\DetallesProforma;
use Novamoda\MayorBundle\Entity\Repository\BaseRepository;

/**
 * ProformasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DetallesProformaRepository extends BaseRepository
{
    private $nombresModelos = array("CJS" => "CAJAS", "PRECIO VENTA" => "PRECIO_VENTA", "UNITARIO" => "PRECIO_UNITARIO");
    private $nombreKey = array("CAJAS" => "CJS", "PRECIO_VENTA" => "PRECIO VENTA", "PRECIO_UNITARIO" => "UNITARIO");
    private $tallas = array("1", "1m", "2", "2m", "3", "3m", "4", "4m", "5", "5m", "6", "6m", "7", "7m", "8", "8m", "9", "9m", "10", "10m", "11", "12", "12m", "13", "13m", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45");

    public function guardarDetalle($data, $proforma)
    {
        $result = "";
//        var_dump($data);
        try {
            $detalle = new DetallesProforma();
            $detalle->setColumna($data["columna"]);
            $detalle->setIdProforma($data["id_proforma"]);
            $detalle->setFila($data["fila"]);
            $detalle->setValor(trim($data["valor"]));
            $detalle->setProforma($proforma);

//            var_dump($detalle);die();
            $this->_em->persist($detalle);
//            $this->_em->flush();
            $result = $detalle->getIdDetalle();
        } catch (\Exception $e) {
            $result = $e->getMessage();
        }
        return $result;
    }

    public function obtenerDetallesPorProforma($idProforma)
    {
        $max = $this->createQueryBuilder("det")->select("MAX(det.fila)")->andWhere("det.idProforma=:idProforma")->setParameter("idProforma", $idProforma)->getQuery()->getSingleScalarResult();
        $cnt = 1;
        $rows = array();
        while ($cnt <= $max) {

            $query = $this->createQueryBuilder("det")->andWhere("det.idProforma=:idProforma")
                ->andWhere("det.fila = :fila")
                ->setParameters(array("idProforma" => $idProforma, "fila" => $cnt));
            $row = array();
            $pos = 0;
            $row["fila"] = $cnt;
            foreach ($query->getQuery()->getResult() as $detalle) {
                /**
                 * @var DetallesProforma $detalle
                 */
                $key = $this->obtenerCabecera($pos, $idProforma);
                $row[$key] = $detalle->getValor();
                $pos++;

            }
            array_push($rows, $row);

            $cnt++;
        }
        return $rows;
    }

    public function obtenerCabecera($pos, $idProforma)
    {
        $query = $this->createQueryBuilder("det")
            ->select("det.valor")
            ->andWhere("det.idProforma=:idProforma")
            ->andWhere("det.fila = 0")
            ->andWhere("det.columna = :columna")
            ->setParameters(array("idProforma" => $idProforma, "columna" => $pos));
        $valor = $query->getQuery()->getSingleScalarResult();
        if (array_key_exists($valor, $this->nombresModelos)) {
            return $this->nombresModelos[$valor];
        } else {
            return $valor;
        }
    }

    public function actualizarDetalle($data)
    {
        if (array_key_exists($data["columna"], $this->nombreKey)) {
            $columna = $this->nombreKey[$data["columna"]];
        } else {
            $columna = $data["columna"];
        }
        $row = $this->obtenerColumnaPorEncabezado($data["id_proforma"], $columna);

        $detalle = $this->findOneBy(array("idProforma" => $data["id_proforma"], "columna" => $row, "fila" => $data["fila"]));
        /**
         * @var DetallesProforma $detalle
         */
        if (!is_null($detalle)) {
            $detalle->setValor($data["valor"]);
            $this->_em->persist($detalle);
            $this->_em->flush();
            return $detalle->getIdDetalle();
        } else {
            return "Ocurrio algun Problema";
        }

    }

    public function obtenerColumnaPorEncabezado($idProforma, $cabecera)
    {
        $columna = 0;
        $result = $this->findOneBy(array("fila" => 0, "idProforma" => $idProforma, "valor" => $cabecera));
        if (!is_null($result)) {
            $columna = $result->getColumna();
        }
        return $columna;
    }

    public function obtenerValorPorEncabezado($idProforma, $fila, $cabecera)
    {
        $columna = $this->obtenerColumnaPorEncabezado($idProforma, $cabecera);
        $result = "";
        $valor = $this->findOneBy(array("fila" => $fila, "idProforma" => $idProforma, "columna" => $columna));
        if (!is_null($valor)) {
            $result = $valor->getValor();
        }
        return $result;
    }

    public function esTalla($columna, $idProforma)
    {
        $result = array();
        $detalle = $this->findOneBy(array("fila" => 0, "idProforma" => $idProforma, "columna" => $columna));
        if (!is_null($detalle)) {
            $valor = $detalle->getValor();
            if (in_array($valor, $this->tallas)) {
                $result["talla"] = $valor;
                $result["columna"] = $columna;
            }
        }
        return $result;
    }

//    public function obtenerCliente($fila, $idProforma)
//    {
//        $result = "";
//        $detalle = $this->findOneBy(array("fila" => 0, "idProforma" => $idProforma, "columna" => "CLIENTE"));
//        if (!is_null($detalle)) {
//
//        }
//
//        return $result;
//    }
//
//    public function obtenerVendedor($fila, $idProforma)
//    {
//
//    }
//    public function esValido($idProforma , $fila){
//        $result = false;
//        $detalle = $this->findOneBy(array("fila" => $fila, "idProforma" => $idProforma, "columna" => $columna));
//    }

//    public function obtenerDetallesTallasPorProforma($idProforma, $fila)
//    {
//
//    }
}
